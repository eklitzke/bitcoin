// Name of the executable with probes. SystemTap requires that this either be an
// absolute path, or something that can be found in $PATH.
@define BITCOIND
%(
  "bitcoind"
%)

probe bitcoin = process(@BITCOIND) {}

probe bitcoin.init_main = process(@BITCOIND).mark("init_main") {
  datadir = user_string($arg1)
  config = user_string($arg2)
}

probe bitcoin.coin_cache_flush = process(@BITCOIND).mark("coin_cache_flush") {
  coins = $arg1
  bytes = $arg2
}

probe bitcoin.coin_cache_fetch = process(@BITCOIND).mark("coin_cache_fetch") {
  hit = $arg1  // 1 for cache hit, 0 for cache miss
}

probe bitcoin.finish_ibd = process(@BITCOIND).mark("finish_ibd") {}

probe bitcoin.read_block_from_disk = process(@BITCOIND).mark("read_block_from_disk") {
  height = $arg1
  filenum = $arg2
}

probe bitcoin.update_tip = process(@BITCOIND).mark("update_tip") {
  block = user_string($arg1)
  height = $arg2
  cache_size = $arg3
  cache_bytes = $arg4
  progress = $arg5
}

probe bitcoin.db_batch_write = process(@BITCOIND).mark("db_batch_write") {
  dbname = user_string($arg1)
  size_estimate = $arg2
  put_count = $arg3
  erase_count = $arg4
}

// Probe the LevelDB table cache to check for hit or miss
probe bitcoin.leveldb_table_cache = process(@BITCOIND).function("leveldb::TableCache::FindTable").return {
  hit = $return->state_ ? 1 : 0
}

// LevelDB background compaction
probe bitcoin.leveldb_compaction = process(@BITCOIND).function("leveldb::DBImpl::BackgroundCompaction") {}

// LevelDB Get
probe bitcoin.leveldb_get = process(@BITCOIND).function("leveldb::DBImpl::Get") {}

// LevelDB Put
probe bitcoin.leveldb_get = process(@BITCOIND).function("leveldb::DBImpl::Put") {}

// LevelDB Write
probe bitcoin.leveldb_get = process(@BITCOIND).function("leveldb::DBImpl::Write") {}

// LevelDB Delete
probe bitcoin.leveldb_get = process(@BITCOIND).function("leveldb::DBImpl::Delete") {}
