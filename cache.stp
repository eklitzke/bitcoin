// global vars
global hits, misses, dbgets

function show_time() {
  t = gettimeofday_ns()
  secs = t / 1000000000
  micros = t % 1000000000
  printf("%d.%09d ", secs, micros)
}

probe nd_syscall.fdatasync, nd_syscall.fsync, nd_syscall.msync, nd_syscall.sync_file_range, nd_syscall.sync, nd_syscall.open, nd_syscall.openat, nd_syscall.close, nd_syscall.mmap2, nd_syscall.munmap {
  if (pid() == target()) {
    show_time()
    printf("begin syscall=%s args=[%s]\n", name, argstr)
  }
}

probe nd_syscall.fdatasync.return, nd_syscall.fsync.return, nd_syscall.msync.return, nd_syscall.sync_file_range.return, nd_syscall.sync.return, nd_syscall.open.return, nd_syscall.openat.return, nd_syscall.close.return, nd_syscall.mmap2.return, nd_syscall.munmap.return {
  if (pid() == target()) {
    show_time()
    printf("end syscall=%s return=%s\n", name, retstr)
  }
}

probe bitcoind = process("/home/evan/code/bitcoin/src/bitcoind") {
}

// record when cache flushes start
probe bitcoind.mark("cache__flush_start") {
  show_time()
  printf("begin flush coins=%lu size=%lu\n", $arg1, $arg2)
}

// record when cache flushes end
probe bitcoind.mark("cache__flush_end") {
  show_time()
  printf("end flush\n")
}

// record cache hits
probe bitcoind.mark("cache__hit") {
  hits++
}

// record cache misses
probe bitcoind.mark("cache__miss") {
  misses++
}

probe bitcoind.mark("finish__ibd") {
  show_time()
  printf("finish_ibd\n")
}

probe bitcoind.function("CCoinsViewDB::GetCoin") {
  dbgets++
}

probe bitcoind.mark("update__tip") {
  show_time()
  printf("update_tip cache_bytes=%lu utxo_count=%lu, progress=0.%06d\n", $arg1, $arg2, $arg3)
}
