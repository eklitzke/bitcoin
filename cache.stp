// global vars
global bytes_flushed, flush_count, hits, misses, dbgets

function show_time() {
  t = gettimeofday_ns()
  secs = t / 1000000000
  micros = t % 1000000000
  printf("%d.%09d ", secs, micros)
}

function show_syscall(tag: string, name: string) {
  show_time()
  printf("%s syscall=%s, pid=%d\n", tag, name, pid())
}

probe nd_syscall.fdatasync, nd_syscall.fsync, nd_syscall.msync, nd_syscall.sync_file_range, nd_syscall.sync {
  show_syscall("begin", name)
}

probe nd_syscall.fdatasync.return, nd_syscall.fsync.return, nd_syscall.msync.return, nd_syscall.sync_file_range.return, nd_syscall.sync.return {
  show_syscall("end", name)
}

probe bitcoind = process("/home/evan/code/bitcoin/src/bitcoind") {
}

// record when cache flushes start
probe bitcoind.mark("cache__flush_start") {
  bytes_flushed += $arg1
  flush_count++
  show_time()
  printf("begin flush size=%d\n", $arg1)
}

// record when cache flushes end
probe bitcoind.mark("cache__flush_end") {
  show_time()
  printf("end flush\n")
}

// record cache hits
probe bitcoind.mark("cache__hit") {
  hits++
}

// record cache misses
probe bitcoind.mark("cache__miss") {
  misses++
}

probe bitcoind.mark("finish__ibd") {
  show_time()
  printf("finish_ibd\n")
}

probe bitcoind.function("CCoinsViewDB::GetCoin") {
  dbgets++
}

probe bitcoind.mark("update__tip") {
  show_time()
  printf("update_tip cache_bytes=%lu utxo_count=%lu\n", $arg1, $arg2)
}

// print cache hit/miss info
probe timer.sec(1) {
  show_time()
  printf("cache hits=%d misses=%d dbgets=%d\n", hits, misses, dbgets)
  hits=0
  misses=0
  dbgets=0
}

probe end {
  printf("---\nEND\n")
  printf("total flushes: %d\n", flush_count)
  printf("total bytes flushed: %d\n", bytes_flushed)
  printf("hit rate: %d / %d\n", hits, misses)
}
